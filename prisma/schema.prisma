// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  votes        Vote[]
  comments     Comment[]
  Notification Notification[]
   sentNotifications    Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")

  @@map("users")
}

model RoadmapItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      Status   @default(PLANNED)
  category    Category
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  votes        Vote[]
  comments     Comment[]
  Notification Notification[]

  @@map("roadmap_items")
}

model Vote {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  itemId String @db.ObjectId

  createdAt DateTime @default(now())

  // Relations
  user User        @relation(fields: [userId], references: [id])
  item RoadmapItem @relation(fields: [itemId], references: [id])

  // Ensure one vote per user per item
  @@unique([userId, itemId])
  @@map("votes")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  itemId    String   @db.ObjectId
  parentId  String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  item         RoadmapItem    @relation(fields: [itemId], references: [id])
  parent       Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies      Comment[]      @relation("CommentReplies")
  Notification Notification[]

  @@map("comments")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  senderId String? @db.ObjectId
  sender   User?   @relation("NotificationSender", fields: [senderId], references: [id])

  receiverId String @db.ObjectId
  receiver   User   @relation("NotificationReceiver", fields: [receiverId], references: [id])

  itemId String?      @db.ObjectId
  item   RoadmapItem? @relation(fields: [itemId], references: [id])

  commentId String?  @db.ObjectId
  comment   Comment? @relation(fields: [commentId], references: [id])

  // Additional data as JSON
  metadata Json?
  User     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId

  @@map("notifications")
}

// Enums
enum Status {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED

  @@map("status")
}

enum Category {
  UI_UX
  FEATURES
  PLATFORM
  SECURITY
  PERFORMANCE
  INTEGRATION
  MOBILE
  API

  @@map("category")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("priority")
}

enum NotificationType {
  COMMENT_REPLY
  COMMENT_MENTION
  ITEM_COMMENT
  ITEM_UPDATE
  VOTE_MILESTONE

  @@map("notification_type")
}
